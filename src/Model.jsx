/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react'
import { MeshTransmissionMaterial, useGLTF } from '@react-three/drei'
import { useControls } from 'leva'
import { useFrame, useLoader } from '@react-three/fiber'
import { RGBELoader } from 'three-stdlib'
import gsap from 'gsap'

export function Model(props) {
    const texture = useLoader(RGBELoader, 'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/aerodynamics_workshop_1k.hdr')
    const { nodes, materials } = useGLTF('/newskool.glb')
    const ref = useRef();
    const [initialAnimationDone, setInitialAnimationDone] = useState(false)
    const { autoRotate, shadow, ...config } = useControls({
        backside: true,
        backsideThickness: { value: 0.3, min: 0, max: 2 },
        samples: { value: 12, min: 1, max: 32, step: 1 },
        resolution: { value: 1024, min: 64, max: 2048, step: 64 },
        transmission: { value: 1, min: 0, max: 1 },
        clearcoat: { value: 0, min: 0.1, max: 1 },
        clearcoatRoughness: { value: 0.0, min: 0, max: 1 },
        thickness: { value: 0.3, min: 0, max: 5 },
        chromaticAberration: { value: 5, min: 0, max: 5 },
        anisotropy: { value: 0.3, min: 0, max: 1, step: 0.01 },
        roughness: { value: 0, min: 0, max: 1, step: 0.01 },
        distortion: { value: 0.5, min: 0, max: 4, step: 0.01 },
        distortionScale: { value: 0.1, min: 0.01, max: 1, step: 0.01 },
        temporalDistortion: { value: 0, min: 0, max: 1, step: 0.01 },
        ior: { value: 1.5, min: 0, max: 2, step: 0.01 },
        color: '#78fbec',
    })

    useEffect(() => {
        gsap.to(ref.current.position, { x: 0, ease: 'power4.inOut', duration: 3.5, delay: 1, onComplete: () => setInitialAnimationDone(true) })
        gsap.to(ref.current.rotation, { y: 0.4, z: 0.4, ease: 'power4.inOut', duration: 3.5, delay: 1 })
    }, [])

    useFrame(({ clock, mouse }) => {
        // after animation is done start floating a bit from current position with lerp and some mouse movement
        if (clock.elapsedTime > 3.5) {
            ref.current.position.x = gsap.utils.interpolate(ref.current.position.x, mouse.x * 0.3, 0.01)
            ref.current.position.y = gsap.utils.interpolate(ref.current.position.y, mouse.y * 0.3, 0.01)

            ref.current.rotation.x = gsap.utils.interpolate(ref.current.rotation.x, (mouse.y * 0.1) + 0.2, 0.01)
            ref.current.rotation.y = gsap.utils.interpolate(ref.current.rotation.y, (mouse.x * 0.5) + 0.2, 0.01)

        }

    }
    )

    return (
        <group  {...props} dispose={null}>
            <mesh rotation={[0, 6, 0]} ref={ref} castShadow receiveShadow geometry={nodes.newskool.geometry} material={materials.Material} position={[10, 0, 0.402]}>
                <MeshTransmissionMaterial {...config} />
            </mesh>
        </group>
    )
}

useGLTF.preload('/newskool.glb')
